// Set up canvas and context
const canvas = document.getElementById("canvas");
const ctx = canvas.getContext("2d");

// Set up game variables
const gridSize = 20;
const gridWidth = canvas.width / gridSize;
const gridHeight = canvas.height / gridSize;
const snake = [{ x: 10, y: 10 }];
const food = { x: 15, y: 15 };
let score = 0;
let dx = 0;
let dy = 0;

// Set up keyboard event listeners
document.addEventListener("keydown", (event) => {
  if (event.keyCode === 37) {
    dx = -1;
    dy = 0;
  } else if (event.keyCode === 38) {
    dx = 0;
    dy = -1;
  } else if (event.keyCode === 39) {
    dx = 1;
    dy = 0;
  } else if (event.keyCode === 40) {
    dx = 0;
    dy = 1;
  }
});

// Set up game loop
function loop() {
  // Move snake
  const head = { x: snake[0].x + dx, y: snake[0].y + dy };
  snake.unshift(head);

  // Check for collision with food
  if (head.x === food.x && head.y === food.y) {
    score++;
    food.x = Math.floor(Math.random() * gridWidth);
    food.y = Math.floor(Math.random() * gridHeight);
  } else {
    snake.pop();
  }

  // Check for collision with walls or self
  if (
    head.x < 0 ||
    head.x >= gridWidth ||
    head.y < 0 ||
    head.y >= gridHeight ||
    snake.slice(1).some((segment) => segment.x === head.x && segment.y === head.y)
  ) {
    alert(`Game over! Score: ${score}`);
    location.reload();
  }

  // Draw game board
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = "green";
  snake.forEach((segment) => {
    ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize, gridSize);
  });
  ctx.fillStyle = "red";
  ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize, gridSize);
  ctx.font = "20px Arial";
  ctx.fillText(`Score: ${score}`, 10, 30);

  // Repeat loop
  setTimeout(() => requestAnimationFrame(loop), 100);
}

// Start game loop
requestAnimationFrame(loop);
